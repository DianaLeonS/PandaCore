#!/usr/bin/env python

import PandaCore.Tools.job_management as jm
from PandaCore.Tools.Misc import PError
import argparse
from os import path,getenv,system
from sys import exit
import pickle

parser = argparse.ArgumentParser(description='simple condor resubmission')
parser.add_argument('--resubmit_all',action='store_true')
parser.add_argument('--resubmit_failed',action='store_true')
parser.add_argument('--kill',action='store_true')
parser.add_argument('--cache',type=str)
args = parser.parse_args()

with open(args.cache+'/submission.pkl') as fpkl:
    submissions = pickle.load(fpkl)


only_failed = not(args.resubmit_all)
statii = {'missing':{}, 'done':{}, 'running':{}, 'idle':{}}
for s in submissions:
    m, d, r, i = s.check_missing(only_failed)
    statii['missing'].update(m)
    statii['done'].update(d)
    statii['running'].update(r)
    statii['idle'].update(i)

for i in statii['missing']:
    if any([i in statii[x] for x in ['running','idle','done']]):
        del statii['missing'][i]

WIDTH=25
header = ''
header += ('%%-%is'%(WIDTH+2))%('Progress')
header += ' %10s %10s %10s %10s %10s'%('Total','Running','Idle','Missing','Done')

colors = {
    'green' : 42,
    'blue' : 44,
    'grey' : 47, 
    'red' : 41,
    }

n = {k:len(statii[k]) for k in statii}
n_total = sum(n.values())
d_frac = float(WIDTH)*n['done']/n_total
r_frac = float(WIDTH)*(n['done']+n['running'])/n_total
i_frac = float(WIDTH)*(n['done']+n['running']+n['idle'])/n_total
s = '[\033[0;%im'%colors['green']
for i in xrange(WIDTH):
    if i>=d_frac:
        s += '\033[0;%im'%colors['blue']
    if i>=r_frac:
        s += '\033[0;%im'%colors['grey']
    if i>=i_frac:
        s += '\033[0;%im'%colors['red']
    s += ' '
s += '\033[0m] '
s += '%10i '%n_total
s += '%10i '%n['running']
s += '%10i '%n['idle']
s += '%10i '%n['missing']
s += '%10i '%n['done']
s += '(done=%.2f%%)'%(d_frac*100./WIDTH)

print header 
print s 

if args.kill:
    for s in submissions:
        print 'Killing ClusterId %i'%s.cluster_id
        system('condor_rm %i'%(s.cluster_id))

if args.resubmit_all or args.resubmit_failed:
    s = submissions[0]
    new_sub = jm.SimpleSubmission(s.cache_dir, s.executable, statii['missing'])
    new_sub.execute()
    new_sub.save()

